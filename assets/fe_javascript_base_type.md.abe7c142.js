import{_ as n,o as l,c as p,x as s,Q as a}from"./chunks/framework.6a483339.js";const h=JSON.parse('{"title":"JS中数据类型和存储上的差别","description":"","frontmatter":{},"headers":[],"relativePath":"fe/javascript/base_type.md","lastUpdated":1699973902000}'),e={name:"fe/javascript/base_type.md"},o=a(`<h1 id="js中数据类型和存储上的差别" tabindex="-1">JS中数据类型和存储上的差别 <a class="header-anchor" href="#js中数据类型和存储上的差别" aria-label="Permalink to &quot;JS中数据类型和存储上的差别&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><ul><li>在JS中，我们可以分成两种类型：<code>原始类型(基本数据)</code>,<code>对象类型(引用类型)</code>;</li><li>两者区别: 存储位置不同</li></ul><h2 id="一、原始类型" tabindex="-1">一、原始类型 <a class="header-anchor" href="#一、原始类型" aria-label="Permalink to &quot;一、原始类型&quot;">​</a></h2><ul><li>String</li><li>Number</li><li>Boolean</li><li>Null</li><li>Undefined</li><li>symbol</li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>为什么说原始类型没有函数可以调用,但是<code>&#39;1&#39;.toString()</code>又可以在浏览器中正确执行?</p><p>因为<code>&#39;1&#39;.toString()</code>中字符串<code>&#39;1&#39;</code>在此时会被封装成对应字符串对象，相当于<code>new String(&#39;1&#39;).toString()</code>,因为<code>new String(&#39;1&#39;)</code> 实例化一个对象，而这个对象上是有<code>toString()</code>方法的</p></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// null到底是什么类型?</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// \`null\`不是一个空引用, 而是一个原始值; 它只是期望此处将引用一个对象, 注意是&quot;期望&quot;.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// \`typeof null\`结果是\`object\`, 这是个历史遗留bug.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 在ECMA6中, 曾经有提案为历史平反, 将\`type null\`的值纠正为\`null\`, 但最后提案被拒了.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 理由是历史遗留代码太多, 不想得罪人, 不如继续将错就错当和事老</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="二、对象类型" tabindex="-1">二、对象类型 <a class="header-anchor" href="#二、对象类型" aria-label="Permalink to &quot;二、对象类型&quot;">​</a></h2><h3 id="对象类型" tabindex="-1">对象类型 <a class="header-anchor" href="#对象类型" aria-label="Permalink to &quot;对象类型&quot;">​</a></h3><ul><li>在javascript中, 除了原始类型，其他的都是对象类型，对象类型储存的是地址，而原始类型储存的是值。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> []</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> a</span></span>
<span class="line"><span style="color:#BABED8;">a</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">1</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(b) </span><span style="color:#676E95;font-style:italic;">// 输出:1</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>以上代码中,创建一个对象类型a(数组),将a的栈储存地址赋值给了变量b，此时修改a的值，打印出b的值也同步发生了改变,因为他们在内存中使用的同一个地址，改变其中任意变量的值，都会影响其他变量的值</p><h3 id="对象当做函数参数" tabindex="-1">对象当做函数参数 <a class="header-anchor" href="#对象当做函数参数" aria-label="Permalink to &quot;对象当做函数参数&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">person</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">person</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">age</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">24</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">person</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        name</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">韩梅梅</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        age</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">18</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">person</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> lilei </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">李雷</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">18</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> user </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#BABED8;">(lilei)</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(lilei</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">age) </span><span style="color:#676E95;font-style:italic;">//输出: 24</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(user</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">age)  </span><span style="color:#676E95;font-style:italic;">//输出: 18</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><ul><li>在Person函数中，person传递的是对象<code>lilei</code>的指针(指向地址)</li><li>在Person函数内部，改变person的属性值，会同步反应到对象<code>lilei</code>上,此时<code>lilei.age</code>属性发生改变，既值为24</li><li>在Person函数内部，将person重新分配一个新的内存地址，此时该<code>person</code>和形参<code>person</code>没有任何关联了，并返回这个最新<code>person</code>对象</li></ul><h3 id="对象转原始类型" tabindex="-1">对象转原始类型 <a class="header-anchor" href="#对象转原始类型" aria-label="Permalink to &quot;对象转原始类型&quot;">​</a></h3><p>对象转原始类型，会调用内置的[ToPrimitive]函数，对于该函数而言，其逻辑如下：</p><ol><li>是否已经是原始类型，是则直接返回</li><li>调用<code>valueOf()</code>，如果转换为原始类型，则返回</li><li>调用<code>toString()</code>，如果转换为原始类型，则返回</li><li>也可以重写<code>Symbol.toPrimitive()</code>方法，优先级别最高</li><li>如果都没有返回原始类型，会报错</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">valueOf</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">toString</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">2</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">    [Symbol</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">toPrimitive]</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(obj </span><span style="color:#89DDFF;">+</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 输出:4</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="三、储存区别" tabindex="-1">三、储存区别 <a class="header-anchor" href="#三、储存区别" aria-label="Permalink to &quot;三、储存区别&quot;">​</a></h2><p>基本类型类型和引用类型类型存储在内存中的位置不同：</p><ul><li><p>基本数据类型存储在栈中</p></li><li><p>引用类型的对象存储于堆中</p></li><li><p>当我们把变量赋值给一个变量时，解析器首先要确认的就是这个值是基本类型值还是引用类型值</p></li></ul><h3 id="基本类型" tabindex="-1">基本类型 <a class="header-anchor" href="#基本类型" aria-label="Permalink to &quot;基本类型&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> a</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#BABED8;">b </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(a) </span><span style="color:#676E95;font-style:italic;">//输出: 10</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// a的值为一个基本类型，是存储在栈中，将a的值赋给b，虽然两个变量的值相等，但是两个变量保存了两个不同的内存地址</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>`,24),r={style:{"text-align":"left"}},c=["src"],t=a(`<h3 id="引用类型" tabindex="-1">引用类型 <a class="header-anchor" href="#引用类型" aria-label="Permalink to &quot;引用类型&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> obj1 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> obj2 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> obj1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">obj2</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">name </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">李雷</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(obj1</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">name)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 输出: 李雷</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 引用类型数据存放在堆对内中，每个堆内存中有一个引用地址，该引用地址存放在栈中</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// obj1是一个引用类型，在赋值操作过程汇总，实际是将堆内存对象在栈内存的引用地址复制了一份给了obj2，实际上他们共同指向了同一个堆内存对象</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 所以更改obj2会对obj1产生影响</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,2),i={style:{"text-align":"left"}},y=["src"],D=a('<h2 id="四、案例" tabindex="-1">四、案例 <a class="header-anchor" href="#四、案例" aria-label="Permalink to &quot;四、案例&quot;">​</a></h2><h3 id="如何使-a-1-a-2-a-3-为-true" tabindex="-1">如何使 a==1 &amp;&amp; a==2 &amp;&amp; a==3 为 &#39;true&#39; <a class="header-anchor" href="#如何使-a-1-a-2-a-3-为-true" aria-label="Permalink to &quot;如何使 a==1 &amp;&amp; a==2 &amp;&amp; a==3 为 &#39;true&#39;&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">valueOf</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">++;</span></span>\n<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">value</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(a </span><span style="color:#89DDFF;">==</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#BABED8;"> a </span><span style="color:#89DDFF;">==</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">2</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#BABED8;"> a </span><span style="color:#89DDFF;">==</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">3</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// 输出:true</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// **代码分析**：</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">//1. 重写对象`a`的`valueOf()`方法，使`value`属性每次调用时自增</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">//2. 当判断`a==1`时，第一次调用`valueOf()`方法，此时`value`等于1，判断`1==1`</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">//3. 判断`a==2`时，第二次调用`valueOf()`方法，此时`value`等于2，判断`2==2`</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">//4. 判断`a==3`时，第三次调用`valueOf()`方法，此时`value`等于3，判断`3==3`</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">//5. `true &amp;&amp; true &amp;&amp; true`, 所以打印`true`</span></span>\n<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="new操作中发生了什么" tabindex="-1">new操作中发生了什么 <a class="header-anchor" href="#new操作中发生了什么" aria-label="Permalink to &quot;new操作中发生了什么&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 1. 创建一个空对象</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// 2. 将构造函数的作用域赋给新对象（因此this就指向了这个新对象）</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// 3. 执行构造函数中的代码(为这个新对象添加属性)</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// 4. 最后返回 this 指向的新对象，也就是实例(如果没有手动返回其他的对象)</span></span>\n<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',5);function F(b,u,d,B,m,E){return l(),p("div",null,[o,s("div",r,[s("img",{src:"/data_type_1.png"},null,8,c)]),t,s("div",i,[s("img",{src:"/data_type_2.png"},null,8,y)]),D])}const _=n(e,[["render",F]]);export{h as __pageData,_ as default};
