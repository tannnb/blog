(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{577:function(a,e,s){"use strict";s.r(e);var n=s(29),t=Object(n.a)({},(function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"lerna-基本操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lerna-基本操作"}},[a._v("#")]),a._v(" lerna 基本操作")]),a._v(" "),s("h4",{attrs:{id:"脚手架项目初始化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#脚手架项目初始化"}},[a._v("#")]),a._v(" 脚手架项目初始化")]),a._v(" "),s("ul",[s("li",[a._v("1.初始化npm项目")]),a._v(" "),s("li",[a._v("2.安装lerna")]),a._v(" "),s("li",[a._v("3.lerna init初始化项目")])]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 创建项目目录project-cli,安装lerna依赖")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 初始化lerna")]),a._v("\nlerna init\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 创建包项目(例如:core)")]),a._v("\nlerna create @project-cli/core\n")])])]),s("h4",{attrs:{id:"创建package"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建package"}},[a._v("#")]),a._v(" 创建package")]),a._v(" "),s("ul",[s("li",[a._v("1.lerna create 创建Package")]),a._v(" "),s("li",[a._v("2.lerna add 安装依赖")]),a._v(" "),s("li",[a._v("3.lerna link 链接依赖")])]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 安装依赖：比如axios,会给packages下所有包都安装axios依赖")]),a._v("\nlerna "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" axios\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 给指定包安装依赖：比如给指定core包")]),a._v("\nlerna "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" axios packages/core/\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 包软链接")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 例如:core下引用utils; 在core package.json中配置utils依赖,然后进行link,此时core node_modules中会出现该包")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 该软链接指向本地开发的包")]),a._v("\nlerna "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("link")]),a._v("\n")])])]),s("h4",{attrs:{id:"脚手架开发和测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#脚手架开发和测试"}},[a._v("#")]),a._v(" 脚手架开发和测试")]),a._v(" "),s("ul",[s("li",[a._v("1.lerna exec 执行shell脚本")]),a._v(" "),s("li",[a._v("2.lerna run 执行npm命令")]),a._v(" "),s("li",[a._v("3.lerna clean 清空依赖")]),a._v(" "),s("li",[a._v("4.lerna bootstrap 重装依赖")])]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 清除所有依赖,需手动删除dependencies中的依赖指定版本")]),a._v("\nlerna clean\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 安装(重装)所有依赖")]),a._v("\nlerna bootstrap\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 执行删除脚本; 会给所有包都执行rm命令")]),a._v("\nlerna "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exec")]),a._v(" -- "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" -rf node_modeules/\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 删除指定包下的文件: --scope @project-cli/core ")]),a._v("\nlerna "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exec")]),a._v(" --scope @project-cli/core -- "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" -rf node_modeules\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 执行所有package.json下test命令")]),a._v("\nlerna run "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("test")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 执行指定包下命令")]),a._v("\nlerna run --scope @project-cli/core "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("test")]),a._v("\n")])])]),s("h4",{attrs:{id:"脚手架发布上线"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#脚手架发布上线"}},[a._v("#")]),a._v(" 脚手架发布上线")]),a._v(" "),s("ul",[s("li",[a._v("1.lerna version")]),a._v(" "),s("li",[a._v("2.lerna changed 查看上版本以来的所有变更")]),a._v(" "),s("li",[a._v("3.lerna diff 查看diff")]),a._v(" "),s("li",[a._v("4.lerna publish 项目发布")])]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 需要先提交到github或Gitee上然后再进行lerna publish")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 确保package.json中的version与仓库中的tag/分支不能相同")]),a._v("\n")])])])])}),[],!1,null,null,null);e.default=t.exports}}]);