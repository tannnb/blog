(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{485:function(e,a,n){"use strict";n.r(a);var r=n(3),l=Object(r.a)({},function(){var e=this,a=e.$createElement,n=e._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"lerna-基本操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#lerna-基本操作","aria-hidden":"true"}},[e._v("#")]),e._v(" lerna 基本操作")]),e._v(" "),n("h4",{attrs:{id:"脚手架项目初始化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#脚手架项目初始化","aria-hidden":"true"}},[e._v("#")]),e._v(" 脚手架项目初始化")]),e._v(" "),n("ul",[n("li",[e._v("1.初始化npm项目")]),e._v(" "),n("li",[e._v("2.安装lerna")]),e._v(" "),n("li",[e._v("3.lerna init初始化项目")])]),e._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("# 创建项目目录project-cli,安装lerna依赖\n\n# 初始化lerna\nlerna init\n\n# 创建包项目(例如:core)\nlerna create @project-cli/core\n")])])]),n("h4",{attrs:{id:"创建package"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建package","aria-hidden":"true"}},[e._v("#")]),e._v(" 创建package")]),e._v(" "),n("ul",[n("li",[e._v("1.lerna create 创建Package")]),e._v(" "),n("li",[e._v("2.lerna add 安装依赖")]),e._v(" "),n("li",[e._v("3.lerna link 链接依赖")])]),e._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("# 安装依赖：比如axios,会给packages下所有包都安装axios依赖\nlerna add axios\n# 给指定包安装依赖：比如给指定core包\nlerna add axios packages/core/\n\n# 包软链接\n# 例如:core下引用utils; 在core package.json中配置utils依赖,然后进行link,此时core node_modules中会出现该包\n# 该软链接指向本地开发的包\nlerna link\n")])])]),n("h4",{attrs:{id:"脚手架开发和测试"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#脚手架开发和测试","aria-hidden":"true"}},[e._v("#")]),e._v(" 脚手架开发和测试")]),e._v(" "),n("ul",[n("li",[e._v("1.lerna exec 执行shell脚本")]),e._v(" "),n("li",[e._v("2.lerna run 执行npm命令")]),e._v(" "),n("li",[e._v("3.lerna clean 清空依赖")]),e._v(" "),n("li",[e._v("4.lerna bootstrap 重装依赖")])]),e._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("# 清除所有依赖,需手动删除dependencies中的依赖指定版本\nlerna clean\n\n# 安装(重装)所有依赖\nlerna bootstrap\n\n# 执行删除脚本; 会给所有包都执行rm命令\nlerna exec -- rm -rf node_modeules/\n\n# 删除指定包下的文件: --scope @project-cli/core \nlerna exec --scope @project-cli/core -- rm -rf node_modeules\n\n# 执行所有package.json下test命令\nlerna run test\n\n# 执行指定包下命令\nlerna run --scope @project-cli/core test\n")])])]),n("h4",{attrs:{id:"脚手架发布上线"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#脚手架发布上线","aria-hidden":"true"}},[e._v("#")]),e._v(" 脚手架发布上线")]),e._v(" "),n("ul",[n("li",[e._v("1.lerna version")]),e._v(" "),n("li",[e._v("2.lerna changed 查看上版本以来的所有变更")]),e._v(" "),n("li",[e._v("3.lerna diff 查看diff")]),e._v(" "),n("li",[e._v("4.lerna publish 项目发布")])]),e._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("# 需要先提交到github或Gitee上然后再进行lerna publish\n# 确保package.json中的version与仓库中的tag/分支不能相同\n")])])])])},[],!1,null,null,null);a.default=l.exports}}]);